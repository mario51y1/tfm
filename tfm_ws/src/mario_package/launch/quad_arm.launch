<?xml version="1.0"?>
<launch>


  <!-- Gazebo & GUI Configuration -->
  <arg name="gazebo"      default="true"  doc="Should the gazebo simulation be launched? Use false in case if you want to include this file and launch gazebo yourself" />
  <arg name="headless"    default="false" doc="Should the gazebo GUI be launched?" />
  <arg name="paused"      default="false" doc="Should the simulation directly be stopped at 0s?" />
  <arg name="world"       default="worlds/empty.world" doc="Filename to a SDF World for gazebo to use" />
  <arg name="rviz"        default="false" doc="Should RVIz be launched?" />

  <!-- Robot Customization -->
  <arg name="robot"       default="fr3"  doc="Which robot to spawn (one of {panda,fr3})" />
   <arg name="arm_id"      default="arm1"   doc="Name of the robot to spawn" />

<arg name="controller"  default="cartesian_impedance_example_controller"     doc="Which example controller should be started? (One of {cartesian_impedance,model,force,joint_position,joint_velocity}_example_controller)" />

  <arg name="use_gripper" default="true"  doc="Should a franka hand be mounted on the flange?" />
  <arg name="x"           default="0"     doc="How far forward to place the base of the robot in [m]?" />
  <arg name="y"           default="0"     doc="How far leftwards to place the base of the robot in [m]?" />
  <arg name="z"           default="0"     doc="How far upwards to place the base of the robot in [m]?" />
  <arg name="roll"        default="0"     doc="How much to rotate the base of the robot around its X-axis in [rad]?" />
  <arg name="pitch"       default="0"     doc="How much to rotate the base of the robot around its Y-axis in [rad]?" />
  <arg name="yaw"         default="0"     doc="How much to rotate the base of the robot around its Z-axis in [rad]?" />
  <arg name="xacro_args"  default=""      doc="Additional arguments to pass to panda.urdf.xacro" />

  <arg name="arm_id_1" default="panda_1" />
  <arg name="arm_id_2" default="panda_2" />
  <arg name="arm_id_3" default="panda_3" />
  <arg name="arm_id_4" default="panda_4" />

  <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg gazebo)">
    <arg name="world_name" value="$(arg world)"/>
    <!-- Always start in paused mode, and only unpause when spawning the model -->
    <arg name="paused" value="true"/>
    <arg name="gui" value="$(eval not arg('headless'))"/>
    <arg name="use_sim_time" value="true"/>
  </include>

  <arg name="initial_joint_positions_arm"
       doc="Initial joint configuration of the panda. Specify as a list of name/v:qalue pairs in form of '-J [name-of-joint] [value-in-rad]'. Default is a 90 degree bend in the elbow"
       default="-J $(arg arm_id_1)_joint1 0
                -J $(arg arm_id_1)_joint2 -0.785398163
                -J $(arg arm_id_1)_joint3 0
                -J $(arg arm_id_1)_joint4 -2.35619449
                -J $(arg arm_id_1)_joint5 0
                -J $(arg arm_id_1)_joint6 1.57079632679
                -J $(arg arm_id_1)_joint7 0.785398163397
                -J $(arg arm_id_1)_finger_joint1 0.001
                -J $(arg arm_id_1)_finger_joint2 0.001
                -J $(arg arm_id_2)_joint1 0
                -J $(arg arm_id_2)_joint2 -0.785398163
                -J $(arg arm_id_2)_joint3 0
                -J $(arg arm_id_2)_joint4 -2.35619449
                -J $(arg arm_id_2)_joint5 0
                -J $(arg arm_id_2)_joint6 1.57079632679
                -J $(arg arm_id_2)_joint7 0.785398163397
                -J $(arg arm_id_2)_finger_joint1 0.001
                -J $(arg arm_id_2)_finger_joint2 0.001
                -J $(arg arm_id_3)_joint1 0
                -J $(arg arm_id_3)_joint2 -0.785398163
                -J $(arg arm_id_3)_joint3 0
                -J $(arg arm_id_3)_joint4 -2.35619449
                -J $(arg arm_id_3)_joint5 0
                -J $(arg arm_id_3)_joint6 1.57079632679
                -J $(arg arm_id_3)_joint7 0.785398163397
                -J $(arg arm_id_3)_finger_joint1 0.001
                -J $(arg arm_id_3)_finger_joint2 0.001   
                -J $(arg arm_id_4)_joint1 0
                -J $(arg arm_id_4)_joint2 -0.785398163
                -J $(arg arm_id_4)_joint3 0
                -J $(arg arm_id_4)_joint4 -2.35619449
                -J $(arg arm_id_4)_joint5 0
                -J $(arg arm_id_4)_joint6 1.57079632679
                -J $(arg arm_id_4)_joint7 0.785398163397
                -J $(arg arm_id_4)_finger_joint1 0.001
                -J $(arg arm_id_4)_finger_joint2 0.001"/>
  <!--
  <arg name="initial_joint_positions_arm2"
       doc="Initial joint configuration of the panda. Specify as a list of name/v:qalue pairs in form of '-J [name-of-joint] [value-in-rad]'. Default is a 90 degree bend in the elbow"
       default="-J $(arg arm_id_2)_joint1 0
                -J $(arg arm_id_2)_joint2 -0.785398163
                -J $(arg arm_id_2)_joint3 0
                -J $(arg arm_id_2)_joint4 -2.35619449
                -J $(arg arm_id_2)_joint5 0
                -J $(arg arm_id_2)_joint6 1.57079632679
                -J $(arg arm_id_2)_joint7 0.785398163397
                -J $(arg arm_id_2)_finger_joint1 0.001
                -J $(arg arm_id_2)_finger_joint2 0.001"
       />
  -->
  <param name="robot_description"
    command="xacro $(find mario_package)/robots/quad_arm.xacro">
  </param>

  <rosparam file="$(find mario_package)/config/quad_cartesian.yaml" command="load"/>

  <!--  <arg name="unpause" value="$(eval '' if arg('paused') else '-unpause')" /> -->
  <arg name="unpause" value="$(eval '' if arg('paused') else '')" />
  <node name="myrobot_model_spawner"
        pkg="gazebo_ros"
        type="spawn_model"
    args="-param robot_description -urdf -model myrobot $(arg unpause)
    "/>
  
  <!-- by default they are stareight, with this they are already in angle 
    $(arg initial_joint_positions_arm)
  "/> -->


  <!-- spawns the controller after the robot was put into its initial joint pose -->

  <node pkg="controller_manager"
        type="spawner"
        name="my_controller_spawner"
        respawn="false" output="screen"
        args="--wait-for initialized franka_state_controller $(arg controller)"
  />
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="arm_controller"/>

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher"/>

  </launch>
